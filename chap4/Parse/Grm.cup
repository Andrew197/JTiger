package Parse;

action code {: static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    :};

parser code  {:
//public Absyn.Exp parseResult; 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

//grm = shorthand for grammar, I assume?
  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

//preliminaries
scan with {: return lexer.nextToken(); :};

//Terminals (tokens returned by the scanner)
terminal String ID, STRING;
terminal Integer INT;
terminal COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, 
	LBRACE, RBRACE, DOT, PLUS, MINUS, TIMES, DIVIDE, EQ, NEQ, LT, LE, 
	GT, GE, AND, OR, ASSIGN, ARRAY, IF, THEN, ELSE, WHILE, FOR, TO,
	DO, LET, IN, END, OF, BREAK, NIL, FUNCTION, VAR, TYPE;

//nonterminals
non terminal Absyn.Exp            Exp;
non terminal Absyn.Var            Var;
non terminal Absyn.Var            lvalue;
non terminal Absyn.Dec            Dec, TyDec, VarDec;
non terminal Absyn.Ty             Ty;
non terminal Absyn.DecList        DecList;
//non terminal Absyn.ExpList        expression lists
//non terminal Absyn.FieldExpList   field expression list
//non terminal Absyn.FieldList      field list

//precedence
precedence left AND;
precedence left OR;
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left DIVIDE;



start with Exp;

decList  ::=
  {: RESULT = null; :}
  |
  decList:d decList:l
  {: RESULT = new Absyn.DecList(d, l); :}
  ;

Exp ::= error:e
    {: RESULT = new Absyn.SeqExp(eleft, null); :}
  | Var:v
    {: RESULT = new Absyn.VarExp(vleft, v); :}
  |
  //LET
  LET decList:l IN seq_exp:e END
  {: RESULT = new Absyn.LetExp(lleft, l, new Absyn.SeqExp(eleft, e)); :}
  |
  //NIL
  NIL:i
  {: RESULT = new Absyn.NilExp(nleft; :}
  |
  //INT
  INT:i
  {: RESULT = new Absyn.IntExp(ileft, i.intValue()); :}
  |
  //STRINGS
  STRING:s
  {: RESULT = new Absyn.StringExp(sleft, s); :}
  |
  //OP-EXP
  exp:l PLUS exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.PLUS, r);  :}
  |
  exp:l MINUS exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.MINUS, r);  :}
  |
  exp:l TIMES exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.MUL, r);  :}
  |
  exp:l DIVIDE exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.DIV, r);  :}
  |
  exp:l EQ exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.EQ, r);  :}
  |
  exp:l NEQ exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.NE, r);  :}
  |
  exp:l LT exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.LT, r);  :}
  |
    exp:l LE exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.LE, r);  :}
  |
  exp:l GT exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.GT, r);  :}
  |
  exp:l GE exp:r
  {: RESULT = new Absyn.OpExp(lleft, l, Absyn.OpExp.GE, r);  :}
  ;


Var ::=  ID:n
    {: RESULT = new Absyn.SimpleVar(nleft, sym(n)); :}


/*
//L-VALUES
lvalue ::= ID:i
    {: RESULT = new Absyn.SimpleVar(ileft, sym(i)); :}
  | lvalue:l DOT ID:i
    {: RESULT = new Absyn.FieldVar(lleft, l, sym(i)); :}
  | lvalue:l LBRACK Exp:e RBRACK 
    {: RESULT = new Absyn.SubscriptVar(lleft, l, e; :}
	;*/

